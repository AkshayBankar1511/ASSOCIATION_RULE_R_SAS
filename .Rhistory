inspect(basket_rules)
library(arulesViz)
plot(basket_rules)
library(arulesViz)
plot(basket_rules)
df_basket <- as(basket_rules,"data.frame")
df_basket$confidence <- df_basket$confidence * 100
df_basket$support <- df_basket$support * nrow(df)
View(df_basket)
df_Groceries <- read.csv("Groceries.csv")
str(df_Groceries)
#Reading the data.
df_Groceries <- read.csv("Groceries.csv")
str(df_Groceries)
#Data cleaning and manipulation.
df_sorted <- df_Groceries[order(df_Groceries$transaction_id),]
df_sorted$transaction_id <- as.numeric(df_sorted$transaction_id)
install.packages("plyr", dependencies = TRUE)
install.packages("plyr", dependencies = TRUE)
df_sorted$itemList <- as.factor(df_sorted$itemList)
str(df_sorted)
df_itemList <- ddply(df_Groceries, c("transaction_id"),
function(df1)paste(df1$itemList, collapse = ","))
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr")
{
detach(package:dplyr, unload = TRUE)
}
library(plyr)
df_itemList <- ddply(df_Groceries, c("transaction_id"),
function(df1)paste(df1$itemList, collapse = ","))
df_itemList$transaction_id <- NULL
colnames(df_itemList) <- c("itemList")
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
install.packages("arules", dependencies = TRUE)
library(arules)
txn = read.transactions(file = "itemList.csv", rm.duplicates = TRUE, format = "basket",sep = ",", cols = 1)
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(minlen=2,sup = 0.01, conf = 0.5,target="rules"))
if(sessionInfo()['basePkgs']=="tm" | sessionInfo()['otherPkgs']=="tm")
{
detach(package:sentiment, unload = TRUE)
detach(package:tm, unload = TRUE)
}
inspect(basket_rules)
df_basket <- as(basket_rules,"data.frame")
df_basket$confidence <- df_basket$confidence * 100
df_basket$support <- df_basket$support * nrow(df)
library(reshape2)
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
install.packages("reshape2")
install.packages("reshape2")
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
colsplit
??colsplit
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
View(df_basket)
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
View(basket_rules)
View(df_basket)
View(df_basket)
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
#Ploting the graphs
library(arulesViz)
plot(basket_rules)
plot(basket_rules, method = "grouped", control = list(k = 5))
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
#Ploting the graphs
library(arulesViz)
plot(basket_rules)
plot(basket_rules, method = "grouped", control = list(k = 5))
plot(basket_rules, method = "graph", control=list(aplha=.5, reorder=TRUE))
plot(basket_rules,measure=c("support","lift"),shading="confidence",interactive=T)
df_Groceries <- read.csv("Groceries.csv")
str(df_Groceries)
df_sorted <- df_Groceries[order(df_Groceries$transaction_id),]
df_sorted$transaction_id <- as.numeric(df_sorted$transaction_id)
df_sorted$itemList <- as.factor(df_sorted$itemList)
str(df_sorted)
install.packages("plyr", dependencies = TRUE)
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr")
{
detach(package:dplyr, unload = TRUE)
}
library(plyr)
df_itemList <- ddply(df_Groceries, c("transaction_id"),
function(df1)paste(df1$itemList, collapse = ","))
df_itemList$transaction_id <- NULL
colnames(df_itemList) <- c("itemList")
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
install.packages("arules", dependencies = TRUE)
library(arules)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules", dependencies = TRUE)
install.packages("arules")
library(arules)
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
library(arules)
txn = read.transactions(file = "itemList.csv", rm.duplicates = TRUE, format = "basket",sep = ",", cols = 1)
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
#Running the apriori algorithm
basket_rules <- apriori(txn,parameter = list(minlen=2,sup = 0.01, conf = 0.5,target="rules"))
if(sessionInfo()['basePkgs']=="tm" | sessionInfo()['otherPkgs']=="tm")
{
detach(package:sentiment, unload = TRUE)
detach(package:tm, unload = TRUE)
}
inspect(basket_rules)
df_basket <- as(basket_rules,"data.frame")
df_basket$confidence <- df_basket$confidence * 100
df_basket$support <- df_basket$support * nrow(df)
View(df_basket)
View(txn)
setwd("C:/PERSONAL DATA/ASSIGNMENT/ASDM/TASK_2/R")
df_Groceries <- read.csv("Groceries.csv")
str(df_Groceries)
df_sorted <- df_Groceries[order(df_Groceries$transaction_id),]
df_sorted$transaction_id <- as.numeric(df_sorted$transaction_id)
df_sorted$itemList <- as.factor(df_sorted$itemList)
str(df_sorted)
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr")
{
detach(package:dplyr, unload = TRUE)
}
install.packages("plyr", dependencies = TRUE)
library(plyr)
df_itemList <- ddply(df_Groceries, c("transaction_id"),
function(df1)paste(df1$itemList, collapse = ","))
df_itemList$transaction_id <- NULL
colnames(df_itemList) <- c("itemList")
#Writing a dataframe to a csv file
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
df_itemList <- ddply(df_Groceries, c("transaction_id"),
function(df1)paste(df1$itemList, collapse = ","))
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
write.csv(df_itemList,"itemList.csv",
quote = FALSE, row.names = TRUE)
install.packages("arules")
library(arules)
install.packages("arules")
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
df_itemList
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
write.csv(df_itemList,"itemList.csv",
write.csv(df_itemList,"itemList.csv", quote = FALSE, row.names = TRUE)
txn = read.transactions(file = "itemList.csv", rm.duplicates = TRUE, format = "basket",sep = ",", cols = 1)
txn = read.transactions(file = "itemList.csv", rm.duplicates = TRUE, format = "basket",sep = ",", cols = 1)
txn = read.transactions(file = "itemList.csv", rm.duplicates = TRUE, format = "basket",sep = ",", cols = 1)
txn = read.transaction_id(file = "itemList.csv", rm.duplicates = TRUE, format = "basket",sep = ",", cols = 1)
txn
txn= read.transactions(file = "itemList.csv", rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
install.packages("arules")
library(arules)
install.packages("Matrix")
txn= read.transactions
txn=
read.transactions(file = "itemList.csv", rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
txn= read.transactions(file = "itemList.csv",
rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
txn=read.transactions(file = "itemList.csv", rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
txn <- read.transactions(file = "itemList.csv", rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
txn <- read.transactions(file = "itemList.csv", rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
library(arules)
install.packages("abbreviate")
txn <- read.transactions(file = "itemList.csv", rm.duplicates = FALSE, format = "basket",sep = ",",cols = 1)
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(minlen=2,sup = 0.01, conf = 0.5,target="rules"))
if(sessionInfo()['basePkgs']=="tm" | sessionInfo()['otherPkgs']=="tm")
{
detach(package:sentiment, unload = TRUE)
detach(package:tm, unload = TRUE)
}
inspect(basket_rules)
df_basket <- as(basket_rules,"data.frame")
df_basket$confidence <- df_basket$confidence * 100
df_basket$support <- df_basket$support * nrow(df)
View(df_basket)
install.packages("reshape2")
library(reshape2)
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
df_basket <- transform(df_basket,
rules = colsplit(rules, pattern = "=>",
names = c("lhs","rhs")))
df_basket <- as(basket_rules,"data.frame")
df_basket$confidence <- df_basket$confidence * 50
df_basket$confidence <- df_basket$confidence * 150
df_basket$confidence <- df_basket$confidence * 250
df_basket$confidence <- df_basket$confidence * 200
View(df_basket)
df_basket$confidence <- df_basket$confidence * 100
df_basket$support <- df_basket$support * nrow(df)
View(df_basket)
transform
df_basket
colsplit
pattern
names
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
??stri_split_regex
transform
rules
pattern
names
df_basket <- transform(df_basket, rules = colsplit(rules, pattern = "=>", names = c("lhs","rhs")))
View(df_basket)
df_basket <- as(basket_rules)
df_basket <- as(basket_rules,"data.frame")
inspect(basket_rules)
basket_rules
basket_rules <- apriori(txn,parameter = list(minlen=2,sup = 0.01, conf = 0.5,target="rules"))
setwd("C:/PERSONAL DATA/ASSIGNMENT/ASDM/TASK_2/R")
setwd("C:/PERSONAL DATA/ASSIGNMENT/ASDM/TASK_2/R")
#Reading the data.
data <- read.csv("Cosmetics.csv", header = T, colClasses = "factor")
str(data)
View(data)
library(arules)
rules <- apriori(data)
summary(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=0.7))
inspect(rules)
View(data)
summary(data)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3, conf=0.7),
appearance = list(rhs=c("Foundation=Yes"), default="lhs"))
inspect(rules)
library(arulesViz)
plot(rules)
plot(rules, method="grouped")
plot(rules, method = "graph", control = list(type="items"))
rules <- apriori(data,parameter = list(minlen=2, maxlen=5,supp=0.1,conf=0.5),
appearance=list(rhs=c("Foundation=Yes"),lhs=c("Bag=Yes", "Blush=Yes",
"Nail.Polish=Yes", "Brushes=Yes", "Concealer=Yes","Eyebrow.Pencils=Yes",
"Bronzer=Yes", "Lip.liner=Yes", "Mascara=Yes", "Eye.Shadow=Yes","Lip.Gloss=Yes",
"Lipstick=Yes","Eyeliner=Yes"), default="none"))
rules <- apriori(data,parameter = list(minlen=2, maxlen=5,supp=0.1,conf=0.5),
appearance=list(rhs=c("Foundation=Yes"),lhs=c("Bag=Yes", "Blush=Yes",
"Nail.Polish=Yes", "Brushes=Yes", "Concealer=Yes","Eyebrow.Pencils=Yes",
"Bronzer=Yes", "Lip.liner=Yes", "Mascara=Yes", "Eye.shadow=Yes","Lip.Gloss=Yes",
"Lipstick=Yes","Eyeliner=Yes"), default="none"))
quality(rules)<-round(quality(rules),digits = 3)
inspect(rules)
subset.matrix<-is.subset(rules,rules)
subset.matrix[lower.tri(subset.matrix,diag = T)]<-NA
redundant<-colSums(subset.matrix,na.rm = T)>=1
which(redundant)
rules.pruned<-rules[!redundant]
rules.pruned<-sort(rules.pruned, by="lift")
inspect(rules.pruned)
redundant
inspect(rules.pruned)
View(redundant)
rules.pruned<-rules[!redundant]
rules.pruned<-sort(rules.pruned, by="lift")
inspect(rules.pruned)
View(rules)
View(rules.pruned)
inspect(rules)
inspect(rules.pruned)
View(rules)
View(rules.pruned)
View(rules.pruned)
plot(rules@quality)
rules_ex <- apriori(data, parameter = list(minlen=2,maxlen=4,conf=0.75))
ruleExplorer(rules_ex)
rules2<-rules[!redundant]
rules2<-sort(rules2, by="lift")
inspect(rules2)
rules2<-rules[!redundant]
rules2<-sort(rules2, by="lift")
inspect(rules2)
View(rules2)
setwd("C:/PERSONAL DATA/ASSIGNMENT/ASDM/TASK_2/R")
#Reading the data.
data <- read.csv("Cosmetics.csv", header = T, colClasses = "factor")
str(data)
#Inspecting the data
names(data)
head(data)
tail(data)
summary(data)
str(data)
dim(data)
yes <- colSums(data=="Yes")
yes
no <- colSums(data=="No")
no
purchased <- rbind(yes,no)
purchased
barplot(purchased,legend=rownames(purchased)) #plot1
barplot(purchased, beside = T, legend=rownames(purchased)) #plot2
barplot(purchased,legend=rownames(purchased))
barplot(purchased, beside = T, legend=rownames(purchased))
library(arules)
rules <- apriori(data)
summary(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=0.7))
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3, conf=0.95),
appearance = list(rhs=c("Foundation=Yes"), default="lhs"))
inspect(rules)
summary(rules)
setwd("C:/PERSONAL DATA/ASSIGNMENT/ASDM/TASK_2/R")
#Reading the data.
data <- read.csv("Cosmetics.csv", header = T, colClasses = "factor")
str(data)
#Inspecting the data
names(data)
head(data)
tail(data)
summary(data)
str(data)
dim(data)
#Ploting with barplot
yes <- colSums(data=="Yes")
yes
no <- colSums(data=="No")
no
purchased <- rbind(yes,no)
purchased
barplot(purchased,legend=rownames(purchased)) #plot1
barplot(purchased, beside = T, legend=rownames(purchased)) #plot2
library(arules)
install.packages("arules")
library(arules)
install.packages("abbreviate")
rules <- apriori(data)
summary(rules)
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=0.95))
summary(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=0.7))
summary(rules)
inspect(rules)
summary(data)
barplot(purchased, beside = T,legend=rownames(purchased))
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=0.7),
appearance = list(rhs=c("Foundation=Yes"),default="lhs"))
summary(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=0.7),
appearance = list(rhs=c("Foundation=Yes"),default="lhs"))
summary(rules)
#Reading the data.
data <- read.csv("Cosmetics.csv", header = T, colClasses = "factor")
str(data)
#Inspecting the data
names(data)
head(data)
tail(data)
summary(data)
str(data)
dim(data)
#Ploting with barplot
yes <- colSums(data=="Yes")
yes
no <- colSums(data=="No")
no
purchased <- rbind(yes,no)
purchased
barplot(purchased,legend=rownames(purchased)) #plot1
barplot(purchased, beside = T, legend=rownames(purchased)) #plot2
#Arules package
library(arules)
rules <- apriori(data)
summary(rules)
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=.7))
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3, conf=0.7),
appearance = list(rhs=c("Foundation=Yes"), default="lhs"))
inspect(rules)
summary(rules)
library(arulesViz)
plot(rules)
plot(rules, method="grouped")
plot(rules, method = "graph", control = list(type="items"))
plot(rules@quality)
rules <- apriori(data,parameter = list(minlen=2, maxlen=5,supp=0.1,conf=0.5),
appearance=list(rhs=c("Foundation=Yes"),lhs=c("Bag=Yes", "Blush=Yes",
"Nail.Polish=Yes", "Brushes=Yes", "Concealer=Yes","Eyebrow.Pencils=Yes",
"Bronzer=Yes", "Lip.liner=Yes", "Mascara=Yes", "Eye.shadow=Yes","Lip.Gloss=Yes",
"Lipstick=Yes","Eyeliner=Yes"), default="none"))
quality(rules)<-round(quality(rules),digits = 3)
inspect(rules)
subset.matrix<-is.subset(rules,rules)
subset.matrix[lower.tri(subset.matrix,diag = T)]<-NA
redundant<-colSums(subset.matrix,na.rm = T)>=1
which(redundant)
rules2<-rules[!redundant]
rules2<-sort(rules2, by="lift")
inspect(rules2)
#Exploring it with Ruleexpo function
rules_ex <- apriori(data, parameter = list(minlen=2,maxlen=4,conf=0.75))
rulesexplorer(rules_ex)
rules_ex <- apriori(data, parameter = list(minlen=2,maxlen=4,conf=0.75))
ruleExplorer(rules_ex)
data <- read.csv("Cosmetics.csv", header = T, colClasses = "factor")
str(data)
#Inspecting the data
names(data)
head(data)
tail(data)
summary(data)
str(data)
dim(data)
#Ploting with barplot
yes <- colSums(data=="Yes")
yes
no <- colSums(data=="No")
no
purchased <- rbind(yes,no)
purchased
barplot(purchased,legend=rownames(purchased)) #plot1
barplot(purchased, beside = T, legend=rownames(purchased))
rules <- apriori(data)
summary(rules)
View(rules)
View(rules_ex)
data <- read.csv("Cosmetics.csv", header = T, colClasses = "factor")
str(data)
dim(data)
#Ploting with barplot
yes <- colSums(data=="Yes")
yes
no <- colSums(data=="No")
no
purchased <- rbind(yes,no)
purchased
barplot(purchased,legend=rownames(purchased)) #plot1
barplot(purchased, beside = T, legend=rownames(purchased)) #plot2
barplot(purchased,legend=rownames(purchased)) #plot1
#Specifying the parameter
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=.7))
inspect(rules)
barplot(purchased, beside = T, legend=rownames(purchased)) #plot2
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=.7))
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=.7))
inspect(rules)
plot(rules)
library(arulesViz)
plot(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3,supp=.7))
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3, conf=0.7),
appearance = list(rhs=c("Foundation=Yes"), default="lhs"))
inspect(rules)
plot(rules, method="grouped")
plot(rules, method = "graph", control = list(type="items"))
plot(rules@quality)
rules <- apriori(data,parameter = list(minlen=2, maxlen=5,supp=0.1,conf=0.5),
appearance=list(rhs=c("Foundation=Yes"),lhs=c("Bag=Yes", "Blush=Yes",
"Nail.Polish=Yes", "Brushes=Yes", "Concealer=Yes","Eyebrow.Pencils=Yes",
"Bronzer=Yes", "Lip.liner=Yes", "Mascara=Yes", "Eye.shadow=Yes","Lip.Gloss=Yes",
"Lipstick=Yes","Eyeliner=Yes"), default="none"))
quality(rules)<-round(quality(rules),digits = 3)
inspect(rules)
plot(rules)
plot(rules, method="grouped")
plot(rules, method = "graph", control = list(type="items"))
subset.matrix<-is.subset(rules,rules)
subset.matrix[lower.tri(subset.matrix,diag = T)]<-NA
redundant<-colSums(subset.matrix,na.rm = T)>=1
which(redundant)
rules2<-rules[!redundant]
rules2<-sort(rules2, by="lift")
inspect(rules2)
plot(rules2)
rules_ex <- apriori(data, parameter = list(minlen=2,maxlen=4,conf=0.75))
ruleExplorer(rules_ex)
plot(rules)
plot(rules, method="grouped")
plot(rules)
plot(rules, method = "graph", control = list(type="items"))
plot(rules)
plot(rules, method="grouped")
plot(rules, method = "graph", control = list(type="items"))
plot(rules@quality)
summary(rules)
inspect(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=3, conf=0.7),
appearance = list(rhs=c("Foundation=Yes"), default="lhs"))
inspect(rules)
summary(rules)
rules <- apriori(data,parameter = list(minlen=2, maxlen=5,supp=0.1,conf=0.5),
appearance=list(rhs=c("Foundation=Yes"),lhs=c("Bag=Yes", "Blush=Yes",
"Nail.Polish=Yes", "Brushes=Yes", "Concealer=Yes","Eyebrow.Pencils=Yes",
"Bronzer=Yes", "Lip.liner=Yes", "Mascara=Yes", "Eye.shadow=Yes","Lip.Gloss=Yes",
"Lipstick=Yes","Eyeliner=Yes"), default="none"))
quality(rules)<-round(quality(rules),digits = 3)
inspect(rules)
inspect(rules_ex)
ruleExplorer(rules_ex)
